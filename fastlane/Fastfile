# frozen_string_literal: true
# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Tests PRs and checks for integrity"
  desc "[String] app_keysafe_name: Name of the application in the keysafe"
  desc "[String] app_keysafe_password: Password of the application in the keysafe"
  desc "[String] artifact_type: Artifact to generate: APK or AAB"
  lane :validate_pr do |options|
    app_keysafe_name = options.fetch(:app_keysafe_name)
    app_keysafe_password = options.fetch(:app_keysafe_password)
    artifact_type = options.fetch(:artifact_type)

    UI.header("Run detekt")

    gradle(
      task: "detekt"
    )

    UI.header("Test the PR")

    tests_result = build_and_test_pr(
      app_name: app_keysafe_name,
      app_password: app_keysafe_password,
      artifact_type: artifact_type
    )

    if tests_result.passed
      UI.success("Nice! Tests pass!")
    else
      UI.crash!("Tests didn't pass. Possible causes:\n"\
      "Error(s): #{tests_result.error}\n"\
      "Did tests pass? #{tests_result.passed}\n")
    end
  end

  desc "Generates daily snapshot and uploads it to GitHub as a pre-release"
  desc "[String] app_keysafe_name: Name of the application in the keysafe"
  desc "[String] app_keysafe_password: Password of the application in the keysafe"
  desc "[String] artifact_type: Artifact to generate: APK or AAB"
  desc "[String] github_repository_name: GitHub repository name"
  desc "[String] github_api_token: GitHub API token that can publish releases"
  lane :generate_daily_snapshot do |options|
    app_keysafe_name = options.fetch(:app_keysafe_name)
    app_keysafe_password = options.fetch(:app_keysafe_password)
    artifact_type = options.fetch(:artifact_type)
    github_repository_name = options.fetch(:github_repository_name)
    github_api_token = options.fetch(:github_api_token)

    UI.header("Generate new tag for the snapshot")
    current_tag = last_git_tag

    tag_flow_result = tag_flow(
      increment: "patch",
      push_to_repo: true,
      committer_name: "github-actions[bot]",
      committer_email: "41898282+github-actions[bot]@users.noreply.github.com"
    )

    new_tag = tag_flow_result[:version]

    UI.header("Generate snapshot")
    generate_internal_result = generate_internal(
      app_name: app_keysafe_name,
      app_password: app_keysafe_password,
      artifact_type: artifact_type
    )

    if generate_internal_result.successful
      UI.header("Create GitHub pre-release")
      changelog = changelog_from_git_commits(
        between: [current_tag, new_tag],
        pretty: "%s",
        merge_commit_filtering: "exclude_merges"
      )

      # We'll upload the universal APK and the AAB (if any) to GitHub. In case of generating APKs, the universal
      # APK would be the same APK as in the build. Also upload the mapping file.
      upload_assets = [
        generate_internal_result.universal_apk_artifact,
        generate_internal_result.build_result.artifact_path,
        generate_internal_result.build_result.mapping_path,
      ].compact.uniq

      set_github_release(
        repository_name: github_repository_name,
        api_bearer: github_api_token,
        tag_name: new_tag,
        name: new_tag,
        description: changelog,
        upload_assets: upload_assets,
        is_prerelease: true
      )
    else
      UI.crash!("The snapshot could not be generated. Possible causes:\n"\
      "Error(s): #{generate_internal_result.error}\n"\
      "Did tests pass? #{generate_internal_result.tests_result.passed}\n"\
      "Was build successful? #{generate_internal_result.successful}\n"\
      "Was build published? #{generate_internal_result.publish_result.published}")
    end
  end

  desc "Promote current internal build to alpha track"
  desc "[String] app_keysafe_name: Name of the application in the keysafe"
  desc "[String] app_keysafe_password: Password of the application in the keysafe"
  lane :promote_to_alpha do |options|
    app_keysafe_name = options.fetch(:app_keysafe_name)
    app_keysafe_password = options.fetch(:app_keysafe_password)

    UI.header("Promote to alpha")

    promote_result = promote_internal_to_alpha(
      app_name: app_keysafe_name,
      app_password: app_keysafe_password
    )

    if promote_result.published
      UI.success("Nice! Your app is published to the alpha track!")
    else
      UI.crash!("App wasn't published. Possible causes:\n"\
      "Error(s): #{promote_result.error}\n")
    end
  end

  desc "Promote current alpha build to production track with 20% rollout"
  desc "[String] app_keysafe_name: Name of the application in the keysafe"
  desc "[String] app_keysafe_password: Password of the application in the keysafe"
  lane :promote_to_production_20 do |options|
    app_keysafe_name = options.fetch(:app_keysafe_name)
    app_keysafe_password = options.fetch(:app_keysafe_password)

    UI.header("Promote to production 20%")

    promote_result = promote_alpha_to_production_20(
      app_name: app_keysafe_name,
      app_password: app_keysafe_password
    )

    if promote_result.published
      UI.success("Nice! Your app is published to the production track with 20% rollout!")
    else
      UI.crash!("App wasn't published. Possible causes:\n"\
      "Error(s): #{promote_result.error}\n")
    end
  end

  desc "Promote current stged production build to production track with 100% rollout"
  desc "[String] app_keysafe_name: Name of the application in the keysafe"
  desc "[String] app_keysafe_password: Password of the application in the keysafe"
  desc "[String] artifact_type: Artifact to upload to HUAWEI AppGallery: APK or AAB"
  desc "[String] github_repository_name: GitHub repository name"
  desc "[String] github_api_token: GitHub API token that can publish releases"
  lane :promote_to_production_100 do |options|
    app_keysafe_name = options.fetch(:app_keysafe_name)
    app_keysafe_password = options.fetch(:app_keysafe_password)
    artifact_type = options.fetch(:artifact_type)
    github_repository_name = options.fetch(:github_repository_name)
    github_api_token = options.fetch(:github_api_token)

    UI.header("Promote to production 100% in Google Play")

    promote_result = promote_production_to_100(
      app_name: app_keysafe_name,
      app_password: app_keysafe_password
    )

    if promote_result.published
      UI.success("Nice! Your app is published to the production track with 100% rollout in Google Play!")
    else
      UI.crash!("App wasn't published to Google Play. Possible causes:\n"\
      "Error(s): #{promote_result.error}\n")

      return
    end

    # Now here's the tricky part: we're going to download the version from GitHub release and upload it to
    # HUAWEI AppGallery

    UI.header("Upload release in HUAWEI AppGallery")

    version_name = promote_result.publish_result.version_name

    latest_release = get_github_release(
      url: github_repository_name,
      api_bearer: github_api_token,
      version: version_name
    )

    # If we have a release matching the published version, try to get the asset linked to the brand and artifact type
    if latest_release
      artifact_asset = latest_release["assets"].select do |asset|
        asset_name = asset["name"].downcase
        asset_name.include?(app_keysafe_name.downcase) && asset_name.include?(artifact_type.downcase)
      end

      if !artifact_asset.nil? && !artifact_asset.empty?
        artifact_path = "/tmp/#{artifact_asset[0]["name"]}"
        artifact_asset_url = artifact_asset[0]["url"]

        # Download the release asset
        download_asset_from_github_release(
          asset_url: artifact_asset_url,
          destination_path: artifact_path,
          api_token: github_api_token
        )

        huawei_upload_result = upload_artifact_to_appgallery(
          app_name: app_keysafe_name,
          app_password: app_keysafe_password,
          artifact_type: artifact_type
        )

        if huawei_upload_result.published
          UI.success("Nice! Your app is published to the production track with 100% rollout in HUAWEI AppGallery!")
        else
          UI.crash!("Upload of #{app_keysafe_name.capitalize} to HUAWEI AppGallery failed")
        end
      else
        UI.crash!("No release found for version #{version_name}, so upload to HUAWEI AppGallery has to be aborted")
      end
    end
  end
end
